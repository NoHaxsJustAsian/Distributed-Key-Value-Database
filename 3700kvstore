#!/usr/bin/env python3

import argparse
import socket
import time
import json
import select
import random

BROADCAST = "FFFF"
FOLLOWER = "follower"
CANDIDATE = "candidate"
LEADER = "leader"
replica_ids = ['0000', '0001', '0002', '0003', '0004']

'''
Represents a replica in the key-value store using the raft protocol.
'''
class Replica:
    def __init__(self, port, id, others):
        # -- Starter Code --
        self.port = port
        self.id = id
        self.others = others
        # -- State --
        self.term = 0
        self.log = [{'src': '', 'key': '', 'value': '', 'MID': '', 'term': 0}]
        self.ongoing_election = False
        self.votedFor = ''
        self.votes = 0
        self.role = FOLLOWER
        self.leader = BROADCAST
        self.last_heartbeat = time.time()
        self.database = {}
        self.last = time.time()

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST, LEADER: BROADCAST, "type": "hello"}
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    '''
    Runs the replica
    '''
    def run(self):
        while True:
            rlist, _, _ = select.select([self.socket], [], [], 0.1)
            for s in rlist:
                data, addr = s.recvfrom(65535)
                full_message = data.decode('utf-8')
                print("Received message '%s'" % (full_message), flush=True)
                msg = json.loads(full_message)
                if msg['type'] == 'get':
                    self.handle_get(msg)
                elif msg['type'] == 'put':
                    self.handle_put(msg)
                elif msg['type'] == 'req_vote':
                    self.handle_request_vote(msg)
                elif msg['type'] == 'vote_t':
                    self.handle_vote(msg)
                elif msg['type'] == 'vote_f':
                    self.handle_rejected_vote(msg)
                elif msg['type'] == 'app_rpc':
                    self.last = time.time()
                    self.handle_append_entries(msg)   
            clock = time.time()
            if clock - self.last > 0.5 and self.role == LEADER:
                self.handle_leader_beat(clock)
            if clock - self.last > 3 and self.role != LEADER:
                self.handle_not_leader_beat(clock)

    '''
    Handles a heartbeat if the leader.
    Params:
        clock: the current time
    '''
    def handle_leader_beat(self, clock):
        self.send_append_entries(replica_ids)
        self.last = clock

    '''
    Handles a heartbeat if not the leader.
    Params:
        clock: the current time
    '''
    def handle_not_leader_beat(self, clock):
        self.start_election()
        self.last = clock

    '''
    Handles a get request from the client.
    Params:
        msg: the message from the client
    '''
    def handle_get(self, msg):
        key = msg['key']
        if self.role == LEADER and self.leader == self.id:
            reply = {"src": self.id,
                        "dst": msg['src'],
                        "leader": self.leader,
                        "type": "ok",
                        "MID": msg['MID'],
                        "value": ''}
            if key in self.database.keys():
                value = self.database[key]
                reply['value'] = value
                self.send(reply)
            else:
                self.send({"src": self.id,
                            "dst": msg['src'],
                            "leader": self.leader,
                            "type": "fail",
                            "MID": msg['MID']})
        else:
            self.send({"src": self.id,
                                "dst": msg['src'],
                                "leader": self.leader,
                                "type": "redirect",
                                "MID": msg['MID']})

    '''
    Handles a put request from the client.
    Params:
        put_msg: the message from the client    
    '''
    def handle_put(self, put_msg):

        # if this socket is the leader
        if self.role == LEADER and self.leader == self.id:
            self.database[put_msg['key']] = put_msg['value']
            self.log.append({'src': put_msg['src'],
                        'key': put_msg['key'],
                        'value': put_msg['value'],
                        'MID': put_msg['MID'],
                        'term': self.term})
            for _ in range(2):
                self.send_to_all({"src": self.id, "dst": 'Null', "leader": self.leader, "type": "app_rpc",
                                    "MID": put_msg['MID'], "key": put_msg['key'], "value": put_msg['value']})
            self.send({"src": self.id, "dst": put_msg['src'], "leader": self.leader, "type": "ok", "MID": put_msg['MID']})
        else:
            if self.leader == 'FFFF':
                self.start_election()
            else:
                # if this socket is not the leader redirect
                redirect_put_msg = {"src": self.id,
                                "dst": put_msg['src'],
                                "leader": self.leader,
                                "type": "redirect",
                                "MID": put_msg['MID']}
                self.send(redirect_put_msg)
                # print(" redirected a put request + current role and leader are " + str(self.leader) + self.role)
            
    '''
    Starts a new election and makes itself a candidate.
    '''
    def start_election(self):
        self.term += 1
        self.role = CANDIDATE
        self.votedFor = self.id
        self.votes += 1
        request_vote_msg = {'src': self.id,
                            'dst': "NULL",
                            'leader': self.leader,
                            'type': 'req_vote',
                            'term': self.term,
                            'candidate_id': self.id,
                            }
        # print(request_vote_msg)
        self.send_to_all(request_vote_msg)

    '''
    Handles a request vote message.
    Params:
        request_vote_msg: the request vote message
    '''
    def handle_request_vote(self, request_vote_msg):
        # print("Received a request vote from " + request_vote_msg['src'])
        request_vote_reply = {'src': self.id,
                            'dst': request_vote_msg['src'],
                            'leader': self.leader,
                            'type': 'Null',
                            'term': self.term
                            }
        if self.votedFor == '':
            request_vote_reply['type'] = 'vote_t'
            self.votedFor = request_vote_msg['src']
            self.send(request_vote_reply)
            # print(str(self.id) + " sent a vote to " + str(request_vote_reply['dst']))
        else:
            request_vote_reply['type'] = 'vote_f'
            self.send(request_vote_reply)
            # print("Already voted for " + str(self.votedFor))

    '''
    Handles a vote from a replica.
    Params:
        vote_true_msg: true_msg from client, only used for testing
        '''
    def handle_vote(self, vote_true_msg):
        self.votes += 1
        # print(str(self.id) + " received a vote from " + vote_true_msg['src'])
        if self.votes >= len(replica_ids) / 2:
            self.leader = self.id
            self.role = LEADER
            self.votes = 0
            self.send_append_entries(replica_ids)

    '''
    Sends an AppendEntriesRPC to the given destinations.
    Params:
        destination: the destinations of the RPC
    '''
    def send_append_entries(self, destination):
        if self.leader == self.id and self.role == LEADER:
            for replica_id in destination:
                self.send({
                    'src': self.id,
                    'dst': replica_id,
                    'type': 'app_rpc',
                    'leader': self.leader,
                    'term': self.term,
                    "key": '', "value": ''
                })
                # print(str(self.id) + " sent append entry RPC to " + str(replica_id))

    '''
    Handles a rejected vote.
    Params:
        rejection_msg: the rejection message from the replica
    '''
    def handle_rejected_vote(self, rejection_msg):
        if self.role == CANDIDATE and rejection_msg['term'] >= self.term:
            self.term = rejection_msg['term']
            self.role = FOLLOWER
            self.votes = 0
            self.votedFor = ''
            self.leader = rejection_msg['leader']

    '''
    Handles an append entries RPC message.
    Params:
        append_entries_rpc: the append entries RPC message
    '''
    def handle_append_entries(self, append_entries_rpc):
        if append_entries_rpc['key'] == '' or append_entries_rpc['value'] == '':
            self.votedFor = ''
            if self.leader == 'FFFF' or not self.leader == append_entries_rpc['leader']:
                self.leader = append_entries_rpc['leader']
                # print(str(self.id) + " set leader to " + str(self.leader))
        else:
            self.database[append_entries_rpc['key']] = append_entries_rpc['value']

    '''
    Sends a message to the client.
    Params:
        message: the message to send
    '''
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    '''
    Sends a message to all replicas.
    Params:
        send_to_all_msg: the message to send
    '''
    def send_to_all(self, send_to_all_msg):
        for replica_id in replica_ids:
            send_to_all_msg['dst'] = replica_id
            self.send(send_to_all_msg)
            # print(str(self.id) + " sent " + str(send_to_all_msg))

    '''
    Appends an entry to the log.
    Params:
        entry: the entry to append
    '''
    def append_to_log(self, entry):
        self.log.append(entry)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
